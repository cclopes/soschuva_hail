.\" 
.\" Copyright (c) 2009 Gordon D. Carrie
.\" All rights reserved.
.\" 
.\" Please address questions and feedback to dev0@trekix.net
.\" 
.\" $Revision: 1.2 $ $Date: 2013/10/04 16:22:27 $
.\"
.TH nnetcdf 3 "NetCDF convenience functions"
.SH NAME
NNC_Open, NNC_Inq_Dim, NNC_Get_Var_Text, NNC_Get_String, NNC_Get_Var_Uchar, NNC_Get_Var_Int, NNC_Get_Var_UInt, NNC_Get_Var_Float, NNC_Get_Var_Double, NNC_Get_Att_String, NNC_Get_Att_Int, NNC_Get_Att_UInt, NNC_Get_Att_Float \- NetCDF convenience functions
.SH SYNOPSIS
.nf
\fB#include "nnetcdf.h"\fP
\fB#define NNCDF_ERROR 1\fP
\fBint\fP \fBNNC_Open\fP(\fBchar *\fP\fIfile_nm\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBsize_t\fP \fBNNC_Inq_Dim\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIdim_name\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBchar *\fP \fBNNC_Get_String\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBchar *\fP\fBNNC_Get_Var_Text\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBchar *\fP\fIcPtr\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBunsigned\fP \fBchar *\fP \fBNNC_Get_Var_UChar\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBunsigned\fP \fBchar *\fP\fIuPtr\fP,
    \fBjmp_buf\fP \fIerror_env\fP);
\fBint *\fP \fBNNC_Get_Var_Int\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBint *\fP\fIiPtr\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBunsigned *\fP \fBNNC_Get_Var_UInt\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBunsigned *\fP\fIiPtr\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBfloat *\fP \fBNNC_Get_Var_Float\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBfloat *\fP\fIfPtr\fP,
    \fBjmp_buf\fP \fIerror_env\fP);
\fBdouble *\fP \fBNNC_Get_Var_Double\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBdouble *\fP\fIdPtr\fP,
    \fBjmp_buf\fP \fIerror_env\fP);
\fBchar *\fP \fBNNC_Get_Att_String\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBchar *\fP\fIatt\fP,
    \fBjmp_buf\fP \fIerror_env\fP);
\fBint *\fP \fBNNC_Get_Att_Int\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBchar *\fP\fIatt\fP, \fBjmp_buf\fP \fIerror_env\fP);
\fBfloat *\fP \fBNNC_Get_Att_Float\fP(\fBint\fP \fIncid\fP, \fBchar *\fP\fIvar_name\fP, \fBchar *\fP\fIatt\fP, \fBjmp_buf\fP \fIerror_env\fP);
.fi
.SH DESCRIPTION
The following functions simplify access to some NetCDF functions.

If a function takes an \fIerror_env\fP argument, it should follow a call
to \fBsetjmp()\fP with \fIerror_env\fP as the \fBjmp_buf\fP argument.
If something goes wrong, the function will use \fBlongjmp()\fP to
repeat the \fBsetjmp()\fP call, but with a return value of \fBNNCDF_ERROR\fP.
The program should then go to a suitable error branch.  See the
documentation for \fBsetjmp\fP and \fBlongjmp\fP for more information.

\fBNNC_Open()\fP opens a NetCDF file named \fIfile_nm\fP and returns a NetCDF
file identifier for it.
It uses \fIerror_env\fP to handle errors as described above. It prints error
messages to \fBstderr\fP.
The file should eventually be closed with a call to \fBnc_close()\fP.

\fBNNC_Inq_Dim()\fP returns the size of the dimension named \fIdim_name\fP
from the NetCDF file identified as \fBncid\fP, which should be a return value
from \fBNNC_Open()\fP or \fBnc_open()\fP.
It uses \fIerror_env\fP to handle errors as described above.  It prints error
messages to \fBstderr\fP.

\fBNNC_Get_String()\fP returns a nul terminated string corresponding to variable
named \fIvar_name\fP from the NetCDF file identified as \fBncid\fP, which should
be a return value from \fBNNC_Open()\fP or \fBnc_open()\fP.
Memory is allocated for the returned string.  This memory should eventually
be freed with a call to \fBFREE()\fP.
It uses \fIerror_env\fP to handle errors as described above.  It prints error
messages to \fBstderr\fP.

\fBNNC_Get_Var_Text()\fP returns the character array corresponding to variable
\fIvar_name\fP from the NetCDF file identified as \fBncid\fP, which should be a
return value from \fBNNC_Open()\fP or \fBnc_open()\fP.
If \fIcPtr\fP is \fBNULL\fP, memory is allocated for the returned array.  This
memory should eventually be freed with a call to \fBFREE()\fP.  If \fIcPtr\fP
is not \fBNULL\fP, it should be a pointer to sufficient storage for the array.
Then \fIcPtr\fP is returned with the values copied into it.
It uses \fIerror_env\fP to handle errors as described above.  It prints error
messages to \fBstderr\fP.

\fBNNC_Get_Var_UChar()\fP is like \fBNNC_Get_Var_Text()\fP, except that it
retrieves an array of unsigned characters.

\fBNNC_Get_Var_Int()\fP is like \fBNNC_Get_Var_Text()\fP, except that it
retrieves an array of integers.

\fBNNC_Get_Var_UInt()\fP is like \fBNNC_Get_Var_Text()\fP, except that it
retrieves an array of unsigned integers.

\fBNNC_Get_Var_Float()\fP is like \fBNNC_Get_Var_Text()\fP, except that it
retrieves an array of floats.

\fBNNC_Get_Var_Double()\fP is like \fBNNC_Get_Var_Text()\fP, except that it
retrieves an array of doubles.

\fBNNC_Get_Att_String()\fP returns a nul terminated string attribute for the
variable named \fIvar_name\fP in the NetCDF file identified as \fBncid\fP, which
should be a return value from \fBNNC_Open()\fP or \fBnc_open()\fP.
If \fIvar_name\fP is "\fBNC_GLOBAL\fP", a global attribute is sought.
Memory is allocated for the returned string.  This memory should eventually
be freed with a call to \fBFREE()\fP.
It uses \fIerror_env\fP to handle errors as described above.  It prints error
messages to \fBstderr\fP.

\fBNNC_Get_Att_Int()\fP returns an integer attribute for the variable named
\fIvar_name\fP in the NetCDF file identified as \fBncid\fP, which should be a
return value from \fBNNC_Open()\fP or \fBnc_open()\fP.
If \fIvar_name\fP is "\fBNC_GLOBAL\fP", a global attribute is sought.
Memory is allocated for the returned array.  This memory should eventually
be freed with a call to \fBFREE()\fP.
It uses \fIerror_env\fP to handle errors as described above.  It prints error
messages to \fBstderr\fP.

\fBNNC_Get_Att_UInt()\fP returns an unsigned integer attribute for the variable
named \fIvar_name\fP in the NetCDF file identified as \fBncid\fP, which should
be a return value from \fBNNC_Open()\fP or \fBnc_open()\fP.
If \fIvar_name\fP is "\fBNC_GLOBAL\fP", a global attribute is sought.
Memory is allocated for the returned array.  This memory should eventually
be freed with a call to \fBFREE()\fP.
It uses \fIerror_env\fP to handle errors as described above.  It prints error
messages to \fBstderr\fP.

\fBNNC_Get_Att_Float()\fP is like \fBNNC_Get_Att_Int()\fP, except that it
returns a float attribute.
.SH SEE ALSO
\fBnetcdf\fP (3), \fBsetjmp\fP (3), \fBlongjmp\fP (3), \fBalloc\fP (3)
.SH AUTHOR
Copyright (c) 2007, 2008, 2009 Gordon D. Carrie.  All rights reserved.
